# Copyright 2024 The Drasi Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Draft Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Version Tag'
        required: true      
      image_prefix:
        description: 'Image Prefix'
        required: false
        default: 'ghcr.io/drasi-project'  

permissions:
  id-token: write # Required for requesting the JWT
  contents: read  # Required for actions/checkout
  packages: write # Required for pushing to GitHub Container Registry

env:
  RELEASE_PATH: ./release
  
  TEST_INFRA_COMPONENTS: '[
    {"label": "E2E proxy", "path": "e2e-test-framework/proxy", "name": "e2e-proxy", "platforms": "linux/amd64,linux/arm64"},
    {"label": "E2E Reactivator", "path": "e2e-test-framework/reactivator", "name": "e2e-reactivator", "platforms": "linux/amd64,linux/arm64"},
    {"label": "E2E Test Service", "path": "e2e-test-framework/test-service", "name": "e2e-test-service", "platforms": "linux/amd64,linux/arm64"}]'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      test_infra_components: ${{ steps.set_components.outputs.test_infra_components }}
    steps:
      - name: Set Component Outputs
        id: set_components
        run: |
          echo "test_infra_components=$(echo '${{ env.TEST_INFRA_COMPONENTS }}' | jq -c .)" >> $GITHUB_OUTPUT
      - name: Debug Outputs
        run: |   
          echo "Test Infra Components: ${{ steps.set_components.outputs.test_infra_components }}"


  build-test-components:
    needs: setup
    permissions:
      packages: write
      contents: read
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix: 
        runner: [ubuntu-latest, ubuntu-24.04-arm]
        component: ${{ fromJson(needs.setup.outputs.test_infra_components) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db # v3.6.1
        with:
          install: true

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine platform and tag suffix
        id: platform
        run: |
          if [[ "${{ matrix.runner }}" == "ubuntu-latest" ]]; then
            echo "platform=linux/amd64" >> $GITHUB_OUTPUT
            echo "suffix=-amd64" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.runner }}" == "ubuntu-24.04-arm" ]]; then
            echo "platform=linux/arm64" >> $GITHUB_OUTPUT
            echo "suffix=-arm64" >> $GITHUB_OUTPUT
          fi

      - name: Build and Push to GHCR
        if: contains(matrix.component.platforms, steps.platform.outputs.platform)
        run: |
          cd ${{ matrix.component.path }}
          DOCKER_TAG_VERSION=${{ inputs.tag }}${{ steps.platform.outputs.suffix }} \
          IMAGE_PREFIX=${{ inputs.image_prefix }} \
          DOCKERX_OPTS="--push --platform ${{ steps.platform.outputs.platform }}" \
          make

  create-test-components-manifest:
    needs: build-test-components
    runs-on: ubuntu-latest
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Manifest List
        run: |
          for component in $(echo '${{ env.TEST_INFRA_COMPONENTS }}' | jq -r '.[].name'); do
            manifests=()
            expected_platforms=$(echo '${{ env.TEST_INFRA_COMPONENTS }}' | jq -r ".[] | select(.name == \"$component\") | .platforms")
            if echo "$expected_platforms" | grep -q "linux/amd64"; then
              
              if docker manifest inspect ghcr.io/drasi-project/$component:${{ inputs.tag }}-amd64 > /dev/null 2>&1; then
                echo "Manifest for $component:${{ inputs.tag }}-amd64:"
                docker manifest inspect ghcr.io/drasi-project/$component:${{ inputs.tag }}-amd64
                manifests+=("ghcr.io/drasi-project/$component:${{ inputs.tag }}-amd64")
              
              else
                echo "Error: Expected amd64 manifest not found for $component:${{ inputs.tag }}-amd64" >&2
                exit 1
              fi
            fi

            if echo "$expected_platforms" | grep -q "linux/arm64"; then

              if docker manifest inspect ghcr.io/drasi-project/$component:${{ inputs.tag }}-arm64 > /dev/null 2>&1; then
                echo "Manifest for $component:${{ inputs.tag }}-arm64:"
                docker manifest inspect ghcr.io/drasi-project/$component:${{ inputs.tag }}-arm64
                manifests+=("ghcr.io/drasi-project/$component:${{ inputs.tag }}-arm64")
              
              else
                echo "Error: Expected arm64 manifest not found for $component:${{ inputs.tag }}-arm64" >&2
                exit 1
              fi
            fi

            if [ ${#manifests[@]} -gt 0 ]; then
              docker buildx imagetools create -t ghcr.io/drasi-project/$component:${{ inputs.tag }} ${manifests[@]}
            else
              echo "No manifests found for $component, skipping manifest creation."
            fi
          done