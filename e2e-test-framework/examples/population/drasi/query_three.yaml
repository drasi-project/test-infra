# Copyright 2025 The Drasi Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

kind: ContinuousQuery
apiVersion: v1
name: continent-country-population
spec:
  mode: query
  sources:
    subscriptions:
      - id: geo-db
        nodes:
          - sourceLabel: Continent
          - sourceLabel: Country
    joins:
      - id: PART_OF_CONTINENT
        keys:
          - label: Country
            property: continent_id
          - label: Continent
            property: id
  query: >
    MATCH
      (country:Country)-[:PART_OF_CONTINENT]->(continent:Continent)
    WITH
      continent,
      sum(country.population) AS ContinentCountryPopulation
    RETURN
      elementId(continent) AS ContinentId,
      continent.name AS ContinentName,
      country.population AS ContinentPopulation,
      ContinentCountryPopulation
---
kind: ContinuousQuery
apiVersion: v1
name: country-city-population
spec:
  mode: query
  sources:
    subscriptions:
      - id: geo-db
        nodes:
          - sourceLabel: Country
          - sourceLabel: City
    joins:
      - id: PART_OF_COUNTRY
        keys:
          - label: City
            property: country_id
          - label: Country
            property: id
  query: >
    MATCH
      (city:City)-[:PART_OF_COUNTRY]->(country:Country)
    WITH
      country,
      sum(city.population) AS CountryCityPopulation
    RETURN
      elementId(country) AS CountryId,
      country.name AS CountryName,
      country.population AS CountryPopulation,
      CountryCityPopulation
---
kind: ContinuousQuery
apiVersion: v1
name: city-population
spec:
  mode: query
  sources:
    subscriptions:
      - id: geo-db
        nodes:
          - sourceLabel: City
  query: >
    MATCH
      (city:City)
    RETURN
      elementId(city) AS CityId,
      city.name AS Name,
      city.population AS Population,
      city.country_id AS CountryId